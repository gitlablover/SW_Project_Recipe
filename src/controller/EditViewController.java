package controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;

import java.io.IOException;
import java.util.Optional;

import dao.IngredientDAO;
import dao.RecipeDAO;
import model.*;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.ListView;

import javafx.scene.control.TextArea;

/**
 * Controller of the edit view
 * 
 * @author Bo Jiao & Hao Yuan
 *
 */
public class EditViewController {
	private String name = "";
	private String inName = "";
	private int inNumber = -1;
	private String inUnit = " ";
	private String prepare = "";
	private String instruction = "";
	private int inId = -1;
	private int inCounter = 0;
	private String preTime = "";
	private String cookTime = "";

	ObservableList<Ingredient> listData = FXCollections.observableArrayList();
	@FXML
	private TextField nameText;
	@FXML
	private TextField inNameText;
	@FXML
	private TextField inNumberText;
	@FXML
	private TextField inUnitText;
	@FXML
	private Button addInButton;
	@FXML
	private TextArea instText;
	@FXML
	private ListView list_1;
	@FXML
	private Button minusInButton;
	@FXML
	private Button confirmButton;
	@FXML
	private TextField pretimeText;
	@FXML
	private TextField cooktimeText;
	@FXML
	private TextField preText;
	@FXML
	private Button backButton;

	// Event Listener on Button[#addInButton].onAction
	/**
	 * when press the add button
	 * 
	 * @param event the event of this case
	 */
	@FXML
	public void abEvent(ActionEvent event) {
		if (inName.equals("")) {
			Alert alert = new Alert(AlertType.INFORMATION, "Name and number can't be nothing!");
			alert.showAndWait();

		} else {
			Cookbook.userIn.add(new Ingredient(inName, inUnit, inNumber, prepare));
			inId = Cookbook.userIn.size() - 1;
			inCounter++;
			listData.add(Cookbook.userIn.get(inId));

			list_1.setItems(listData);
		}
	}

	// Event Listener on Button[#minusInButton].onAction
	/**
	 * when press the minus button
	 * 
	 * @param event the event in this case
	 */
	@FXML
	public void mbEvent(ActionEvent event) {
		Cookbook.userIn.remove(list_1.getSelectionModel().getSelectedItem());
		inId--;
		inCounter--;
		listData.remove(list_1.getSelectionModel().getSelectedItem());
		list_1.setItems(listData);
		// TODO Autogenerated
	}

	/**
	 * when press the back button
	 * 
	 * @param event the event in this case
	 */
	public void backEvent(ActionEvent event) {
		AnchorPane MainView = null;
		BorderPane rootLayout = null;
		Alert alert = new Alert(AlertType.WARNING, "You may lost the changes you've made! ");
		alert.showAndWait();

		try {
			rootLayout = FXMLLoader.load(getClass().getResource("/view/RootLayout.fxml"));
			MainView = FXMLLoader.load(getClass().getResource("/view/MainView.fxml"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		confirmButton.getScene().setRoot(rootLayout);
		rootLayout.setCenter(MainView);
	}

	// Event Listener on Button[#confirmButton].onAction
	/**
	 * when press the submit button
	 * 
	 * @param event the event in this case
	 */
	@FXML
	public void cbEvent(ActionEvent event) {
		if (name.equals("")) {
			Alert alert = new Alert(AlertType.INFORMATION, "Name can't be nothing!");
			alert.showAndWait();

		} else if (inCounter == 0) {
			Alert alert = new Alert(AlertType.INFORMATION, "Ingredient can't be nothing!");
			alert.showAndWait();

		} else {
			Alert alert = new Alert(AlertType.CONFIRMATION, "Change the recipe?", ButtonType.YES, ButtonType.CANCEL);
			Optional<ButtonType> result = alert.showAndWait();
			if (result.get() == ButtonType.YES) { // User authorizes the action.

//				int oldLength = AppModel.nowRecipe.getIngredientList().size();

				Cookbook.nowRecipe.clearIngredient();
				Cookbook.nowRecipe.setName(name);
				Cookbook.nowRecipe.setInstruction(instruction);
				Cookbook.nowRecipe.setPreparationTime(preTime);
				Cookbook.nowRecipe.setCookingTime(cookTime);
				for (Ingredient in : Cookbook.userIn) {
					Cookbook.nowRecipe.addIngredient(in);
				}

				try {
//					if(AppModel.nowRecipe.getIngredientList().size()>=oldLength) {
//						for (Ingredient i : AppModel.userIn) {
//							IngredientDAO.updateIngredient(i);
//						}
//						for (int i = oldLength-1; i < AppModel.nowRecipe.getIngredientList().size(); i++) {
//							IngredientDAO.createNewIngredient(AppModel.nowRecipe.getIngredientList().get(i));
//						}
//					}
//					else {
//						
//					}
					IngredientDAO.deleteIngredientByRecipeID(Cookbook.nowRecipe.getId());
					for (Ingredient i : Cookbook.userIn) {
						IngredientDAO.createNewIngredient(i);
					}

					RecipeDAO.updateRecipe(Cookbook.nowRecipe);
				} catch (Exception e) {
					System.out.println("action failed!");
				}

				ButtonType back = new ButtonType("Back to homePage");
				ButtonType view = new ButtonType("View the recipe!");
				Alert alert1 = new Alert(AlertType.CONFIRMATION, "Success!", back, view);
				Optional<ButtonType> result1 = alert1.showAndWait();
				if (result1.get() == view) { // User authorizes the action.
					AnchorPane recipeView = null;
					BorderPane rootLayout = null;
					try {
						rootLayout = FXMLLoader.load(getClass().getResource("/view/RootLayout.fxml"));
						recipeView = FXMLLoader.load(getClass().getResource("/view/RecipeView.fxml"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					confirmButton.getScene().setRoot(rootLayout);
					rootLayout.setCenter(recipeView);
				}

				if (result1.get() == back) {
					Cookbook.update();

					AnchorPane MainView = null;
					BorderPane rootLayout = null;
					try {
						rootLayout = FXMLLoader.load(getClass().getResource("/view/RootLayout.fxml"));
						MainView = FXMLLoader.load(getClass().getResource("/view/MainView.fxml"));
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					confirmButton.getScene().setRoot(rootLayout);
					rootLayout.setCenter(MainView);
				}
			}

		}
	}

	/**
	 * initialize of the editview
	 * 
	 */
	public void initialize() {
		nameText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				name = nameText.getText();
			}
		});
		inNameText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				inName = inNameText.getText();
			}
		});
		inNumberText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				if (inNumberText.getText().matches("[0-9]+"))
					inNumber = Integer.valueOf(inNumberText.getText());
				else {
					Alert alert = new Alert(AlertType.INFORMATION, "Must be a number!");
					alert.showAndWait();

				}

			}
		});
		inUnitText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				inUnit = inUnitText.getText();
			}
		});
		instText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				instruction = instText.getText();
			}
		});
		preText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				prepare = preText.getText();
			}
		});
		pretimeText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				preTime = pretimeText.getText();
			}
		});
		cooktimeText.textProperty().addListener(new ChangeListener<String>() {
			@Override
			public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
				cookTime = cooktimeText.getText();
			}
		});
		list_1.setOnMouseClicked(new EventHandler<MouseEvent>() {
			@Override
			public void handle(MouseEvent event) {
				if (list_1.getSelectionModel().getSelectedItem() == null) {
				} else {
					Ingredient in = (Ingredient) list_1.getSelectionModel().getSelectedItem();
					inNameText.setText(in.getIngredientName());
					inUnitText.setText(in.getUnit());
					inNumberText.setText(in.getQuantity() + "");
					preText.setText(in.getpretreatment());
				}
			}
		});

		nameText.setText(Cookbook.nowRecipe.toString());
		pretimeText.setText(Cookbook.nowRecipe.getPreparationTime());
		cooktimeText.setText(Cookbook.nowRecipe.getCookingTime());
		instText.setText(Cookbook.nowRecipe.getInstruction());
		listData.addAll(Cookbook.nowRecipe.getIngredientList());
		list_1.setItems(listData);
		Cookbook.userIn.clear();
		Cookbook.userIn.addAll(listData);
		
		if(!Cookbook.userIn.isEmpty()) {
			inNumberText.setText(Cookbook.userIn.get(0).getQuantity() + "");
			inNameText.setText(Cookbook.userIn.get(0).getIngredientName());
			preText.setText(Cookbook.userIn.get(0).getpretreatment());
			inUnitText.setText(Cookbook.userIn.get(0).getUnit());
			inCounter = Cookbook.nowRecipe.getIngredientList().size();
		}
	}
}
